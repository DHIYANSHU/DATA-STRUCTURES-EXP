#include <stdio.h>
#include <stdlib.h>

typedef struct Queue {
    int arr[100];
    int front, rear;
} Queue;

void initQueue(Queue* q) {
    q->front = q->rear = -1;
}

void enqueue(Queue* q, int data) {
    if (q->rear == 99) return;
    if (q->front == -1) q->front = 0;
    q->arr[++q->rear] = data;
}

int dequeue(Queue* q) {
    if (q->front == -1) return -1;
    int data = q->arr[q->front];
    if (q->front == q->rear) {
        q->front = q->rear = -1;
    } else {
        q->front++;
    }
    return data;
}

typedef struct Stack {
    Queue q1, q2;
} Stack;

void push(Stack* s, int data) {
    enqueue(&s->q2, data);
    while (s->q1.front != -1) {
        enqueue(&s->q2, dequeue(&s->q1));
    }
    Queue temp = s->q1;
    s->q1 = s->q2;
    s->q2 = temp;
}

int pop(Stack* s) {
    return dequeue(&s->q1);
}

int main() {
    Stack s;
    initQueue(&s.q1);
    initQueue(&s.q2);

    push(&s, 10);
    push(&s, 20);
    push(&s, 30);

    printf("Popped element: %d\n", pop(&s));
    printf("Popped element: %d\n", pop(&s));
    return 0;
}
