#include <stdio.h>
#include <stdlib.h>

// A linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the beginning of the list
void insert_at_beginning(struct Node** head_ref, int new_data) {
    // 1. Allocate node
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));

    // 2. Put in the data
    new_node->data = new_data;

    // 3. Make next of new node as head
    new_node->next = (*head_ref);

    // 4. Move the head to point to the new node
    (*head_ref) = new_node;
}

// Function to insert a new node after a given node
void insert_after(struct Node* prev_node, int new_data) {
    // 1. Check if the given prev_node is NULL
    if (prev_node == NULL) {
        printf("The given previous node cannot be NULL");
        return;
    }

    // 2. Allocate new node
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));

    // 3. Put in the data
    new_node->data = new_data;

    // 4. Make next of new node as next of prev_node
    new_node->next = prev_node->next;

    // 5. Make next of prev_node as new_node
    prev_node->next = new_node;
}

// Function to insert a new node at the end of the list
void insert_at_end(struct Node** head_ref, int new_data) {
    // 1. Allocate node
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));

    struct Node* last = *head_ref;

    // 2. Put in the data
    new_node->data = new_data;

    // 3. This new node is going to be the last node, so make its next as NULL
    new_node->next = NULL;

    // 4. If the Linked List is empty, then make the new node as head
    if (*head_ref == NULL) {
        *head_ref = new_node;
        return;
    }

    // 5. Else traverse till the last node
    while (last->next != NULL) {
        last = last->next;
    }

    // 6. Change the next of last node
    last->next = new_node;
}

// Function to delete a node with a given key
void delete_node(struct Node** head_ref, int key) {
    // Store head node
    struct Node* temp = *head_ref, *prev;

    // If head node itself holds the key to be deleted
    if (temp != NULL && temp->data == key) {
        *head_ref = temp->next;
        free(temp);
        return;
    }

    // Search for the key to be deleted, keep track of the previous node
    while (temp != NULL && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }

    // If key was not present in the list
    if (temp == NULL) return;

    // Unlink the node from the linked list
    prev->next = temp->next;

    free(temp); // Free memory
}

// Function to print the linked list
void print_list(struct Node* node) {
    while (node != NULL) {
        printf("%d -> ", node->data);
        node = node->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;

    // Insert 6. The list becomes 6 -> NULL
    insert_at_end(&head, 6);

    // Insert 7 at the beginning. The list becomes 7 -> 6 -> NULL
    insert_at_beginning(&head, 7);

    // Insert 1 at the beginning. The list becomes 1 -> 7 -> 6 -> NULL
    insert_at_beginning(&head, 1);

    // Insert 4 at the end. The list becomes 1 -> 7 -> 6 -> 4 -> NULL
    insert_at_end(&head, 4);

    // Insert 8 after the second node (7). The list becomes 1 -> 7 -> 8 -> 6 -> 4 -> NULL
    insert_after(head->next, 8);

    printf("Created Linked list is: ");
    print_list(head);

    // Delete node with data 8
    delete_node(&head, 8);

    printf("Linked list after deletion of 8: ");
    print_list(head);

    return 0;
}
