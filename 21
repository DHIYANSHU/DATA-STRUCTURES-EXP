#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_NODES 100

int adj_matrix[MAX_NODES][MAX_NODES];
bool visited[MAX_NODES];
int queue[MAX_NODES];
int front = -1, rear = -1;

// Queue functions
void enqueue(int item) {
    if (rear == MAX_NODES - 1) {
        printf("Queue is full\n");
        return;
    }
    if (front == -1) {
        front = 0;
    }
    queue[++rear] = item;
}

int dequeue() {
    if (front == -1 || front > rear) {
        printf("Queue is empty\n");
        return -1;
    }
    return queue[front++];
}

int is_empty() {
    return (front == -1 || front > rear);
}

// BFS traversal
void bfs(int start_node, int num_nodes) {
    for (int i = 0; i < num_nodes; i++) {
        visited[i] = false;
    }
    front = -1;
    rear = -1;

    visited[start_node] = true;
    enqueue(start_node);

    while (!is_empty()) {
        int current_node = dequeue();
        printf("%d ", current_node);

        for (int i = 0; i < num_nodes; i++) {
            if (adj_matrix[current_node][i] == 1 && !visited[i]) {
                visited[i] = true;
                enqueue(i);
            }
        }
    }
}

int main() {
    int num_nodes = 6;
    int edges[][2] = {{0, 1}, {0, 2}, {1, 3}, {1, 4}, {2, 5}};

    // Initialize adjacency matrix
    for (int i = 0; i < num_nodes; i++) {
        for (int j = 0; j < num_nodes; j++) {
            adj_matrix[i][j] = 0;
        }
    }

    // Populate adjacency matrix
    for (int i = 0; i < sizeof(edges) / sizeof(edges[0]); i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        adj_matrix[u][v] = 1;
        adj_matrix[v][u] = 1;
    }

    printf("BFS traversal starting from node 0: ");
    bfs(0, num_nodes);
    printf("\n");

    return 0;
}
