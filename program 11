#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_SIZE 100

// A structure to represent a stack
struct Stack {
    int top;
    unsigned capacity;
    int* array;
};

// Function to create a stack of a given capacity
struct Stack* create_stack(unsigned capacity) {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (int*)malloc(stack->capacity * sizeof(int));
    return stack;
}

// Stack is full when top is equal to the last index
int is_full(struct Stack* stack) {
    return stack->top == stack->capacity - 1;
}

// Stack is empty when top is -1
int is_empty(struct Stack* stack) {
    return stack->top == -1;
}

// Function to add an item to the stack. It increases top by 1.
void push(struct Stack* stack, int item) {
    if (is_full(stack)) {
        printf("Stack Overflow\n");
        return;
    }
    stack->array[++stack->top] = item;
    printf("%d pushed to stack\n", item);
}

// Function to remove an item from the stack. It decreases top by 1.
int pop(struct Stack* stack) {
    if (is_empty(stack)) {
        printf("Stack Underflow\n");
        return INT_MIN; // Use INT_MIN to indicate an error
    }
    return stack->array[stack->top--];
}

// Function to return the top element from the stack without removing it.
int peek(struct Stack* stack) {
    if (is_empty(stack)) {
        printf("Stack is empty\n");
        return INT_MIN;
    }
    return stack->array[stack->top];
}

int main() {
    struct Stack* stack = create_stack(MAX_SIZE);

    push(stack, 10);
    push(stack, 20);
    push(stack, 30);

    printf("%d popped from stack\n", pop(stack));
    printf("Top element is %d\n", peek(stack));
    printf("%d popped from stack\n", pop(stack));
    printf("Top element is %d\n", peek(stack));

    return 0;
}
